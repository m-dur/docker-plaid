@startuml Financial Data Fetcher Architecture

' Styling
skinparam componentStyle uml2
skinparam component {
  BackgroundColor LightBlue
  BorderColor Black
  ArrowColor Black
}

' Components
package "Web Application" {
  [app.py] as App
  
  package "Routes" {
    [data_routes] as DataRoutes
    [transaction_routes] as TransRoutes
    [analysis_routes] as AnalysisRoutes
    [institution_routes] as InstRoutes
    [api_routes] as APIRoutes
    [analytics_routes] as AnalyticsRoutes
    [expenses_routes] as ExpensesRoutes
  }
  
  package "Templates" {
    [templates/index.html] as UI
    [templates/transactions.html] as TransactionsUI
    [templates/data.html] as DataUI
    [templates/cashflow.html] as CashflowUI
    [templates/income.html] as IncomeUI
    [templates/net_income.html] as NetIncomeUI
    [templates/daily_expenses.html] as DailyExpensesUI
    [templates/expenses.html] as ExpensesUI
    [templates/expenses_group.html] as ExpensesGroupUI
  }
  
  [db_schema.py] as SchemaGen
  [convert_diagrams.py] as DiagramGen
}

package "Services" {
  [plaid_service.py] as PlaidService
  
  package "Financial Data Handler" {
    [FinancialDataHandler] as DataHandler
    
    package "Processors" {
      [accounts_processor] as AccountProcessor
      [institutions_processor] as InstProcessor
      [transactions_processor] as TransProcessor
      [analysis_processor] as AnalysisProcessor
      [expenses_processor] as ExpensesProcessor
    }
  }
}

database "PostgreSQL" as DB {
  package "Core Tables" {
    [institutions]
    [account_history]
    [items]
  }
  package "Views" {
    [accounts]
    [depository_accounts]
    [credit_accounts]
    [investment_accounts]
    [loan_accounts]
    [stg_transactions]
  }
  package "Transaction Tables" {
    [transactions]
    [category_mappings]
    [group_mappings]
  }
  package "API Tables" {
    [plaid_api_calls]
    [institution_cursors]
    [access_tokens]
  }
}

package "External Services" {
  [Plaid API] as PlaidAPI
}

' Relationships
App -down-> DataRoutes
App -down-> TransRoutes
App -down-> AnalysisRoutes
App -down-> InstRoutes
App -down-> APIRoutes
App -down-> AnalyticsRoutes
App -down-> ExpensesRoutes

App -down-> UI : renders
App -down-> PlaidService : uses
App -down-> DataHandler : orchestrates
App -down-> SchemaGen : generates
App -down-> DiagramGen : generates

DataHandler -down-> PlaidService : fetches data
DataHandler -down-> AccountProcessor : processes
DataHandler -down-> InstProcessor : processes
DataHandler -down-> TransProcessor : processes
DataHandler -down-> AnalysisProcessor : processes
DataHandler -down-> ExpensesProcessor : processes

PlaidService -down-> PlaidAPI : makes API calls
PlaidService -down-> DB : stores tokens

' Notes
note right of DataHandler
  Main Orchestrator
  - Manages database connections
  - Coordinates data processing
  - Handles transactions sync
  - Updates category mappings
end note

note right of PlaidService
  Plaid Integration
  - Manages access tokens
  - Handles API responses
  - Syncs transactions
  - Manages cursors
end note

@enduml
