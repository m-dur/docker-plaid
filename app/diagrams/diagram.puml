@startuml Financial Data Fetcher Architecture

' Styling
skinparam componentStyle uml2
skinparam component {
  BackgroundColor LightBlue
  BorderColor Black
  ArrowColor Black
}

' Components
package "Web Application" {
  [app.py] as App
  
  package "Routes" {
    [data_routes] as DataRoutes
    [transaction_routes] as TransRoutes
    [analysis_routes] as AnalysisRoutes
    [institution_routes] as InstRoutes
    [api_routes] as APIRoutes
  }
  
  package "Templates" {
    [templates/index.html] as UI
    [templates/transactions.html] as TransactionsUI
    [templates/data.html] as DataUI
    [templates/cashflow.html] as CashflowUI
    [templates/income.html] as IncomeUI
    [templates/net_income.html] as NetIncomeUI
    [templates/daily_expenses.html] as DailyExpensesUI
  }
  
  [db_schema.py] as SchemaGen
}

package "Services" {
  [plaid_service.py] as PlaidService
  
  package "Financial Data Handler" {
    [FinancialDataHandler] as DataHandler
    
    package "Processors" {
      [accounts_processor] as AccountProcessor
      [institutions_processor] as InstProcessor
      [transactions_processor] as TransProcessor
      [analysis_processor] as AnalysisProcessor
    }
    
    package "DB Operations" {
      [accounts_db] as AccountDB
      [institutions_db] as InstDB
      [transactions_db] as TransDB
      [query_operations] as QueryOps
      [statistics_operations] as StatsOps
    }
  }
}

package "Storage" {
  database "PostgreSQL" as DB {
    [accounts]
    [institutions]
    [transactions]
    [stg_transactions]
    [category_mappings]
    [group_mappings]
    [account_history]
    [depository_accounts]
    [credit_accounts]
    [investment_accounts]
    [loan_accounts]
    [plaid_api_calls]
    [institution_cursors]
    [access_tokens]
  }
}

package "External Services" {
  [Plaid API] as PlaidAPI
}

' Relationships
App --> DataRoutes
App --> TransRoutes
App --> AnalysisRoutes
App --> InstRoutes
App --> APIRoutes

App --> UI : renders
App --> PlaidService : uses
App --> DataHandler : orchestrates
App --> SchemaGen : generates DB diagram

DataHandler --> PlaidService : fetches data
DataHandler ..> AccountProcessor : processes
DataHandler ..> InstProcessor : processes
DataHandler ..> TransProcessor : processes
DataHandler --> AnalysisProcessor
DataHandler --> StatsOps

DataHandler --> AccountDB : saves
DataHandler --> InstDB : saves
DataHandler --> TransDB : saves
DataHandler --> QueryOps : executes

PlaidService --> PlaidAPI : makes API calls
PlaidService --> DB : stores tokens & cursors
AccountDB --> DB : writes
InstDB --> DB : writes
TransDB --> DB : writes
QueryOps --> DB : queries

' Notes
note right of DataHandler
  Main Orchestrator
  - Manages database connections
  - Coordinates data processing
  - Handles transactions sync
  - Updates category mappings
end note

note right of PlaidService
  Plaid Integration
  - Manages access tokens
  - Handles API responses
  - Syncs transactions
  - Manages cursors
end note

note right of DB
  Database Schema
  - Core tables (institutions, account_history)
  - View tables (accounts, account type views)
  - Transaction tables & views
  - API tracking (plaid_api_calls)
  - Authentication (access_tokens)
end note

@enduml
